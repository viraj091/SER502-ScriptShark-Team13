% Tokenizer
:- use_module(library(dcg/basics)).

tokenize(Input, Tokens) :-
    string_codes(Input, Codes),
    phrase(tokens(Tokens), Codes).

tokens([T|Ts]) --> 
    skip_blanks, token(T), 
    !, tokens(Ts).
tokens([]) --> 
    skip_blanks, eos.

token(Token) -->
    string_without(" \n\t\r", Chars),
    { Chars \= [], atom_codes(Token, Chars) }.
token(';') --> ";".
token('.') --> ".".
token(',') --> ",".
token('(') --> "(".
token(')') --> ")".
token(':=') --> ":=".
token('=') --> "=".
token('+') --> "+".
token('-') --> "-".
token('*') --> "*".
token('/') --> "/".
token('<') --> "<".
token('>') --> ">".
token('?') --> "?".
token(':') --> ":".
token('[') --> "[".
token(']') --> "]".
token('{') --> "{".
token('}') --> "}".
token('endfor') --> "endfor".
token('endif') --> "endif".
token('endtern') --> "endtern".
token('endwhile') --> "endwhile".
token('if') --> "if".
token('else') --> "else".
token('then') --> "then".
token('do') --> "do".
token('while') --> "while".
token('for') --> "for".
token('in') --> "in".
token('range') --> "range".
token('not') --> "not".
token('true') --> "true".
token('false') --> "false".
token('print') --> "print".
token('begin') --> "begin".
token('end') --> "end".
