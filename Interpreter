% Interpreter
:- dynamic variable/2.

interpret(prog(Commands), Result) :-
    retractall(variable(_,_)), % Clear previous variables
    interpret_commands(Commands, Result).

interpret_commands([], []).
interpret_commands([Command|Commands], Results) :-
    interpret_command(Command, Result),
    interpret_commands(Commands, MoreResults),
    append(Result, MoreResults, Results).

interpret_command(assign(Var, Expr), []) :-
    evaluate_expression(Expr, Value),
    asserta(variable(Var, Value)).
interpret_command(if(BoolExpr, ThenBlock, ElseBlock), Result) :-
    evaluate_expression(BoolExpr, true)
    -> interpret(ThenBlock, Result)
    ;  interpret(ElseBlock, Result).
interpret_command(while(BoolExpr, DoBlock), Result) :-
    interpret_while(BoolExpr, DoBlock, Result).
interpret_command(print(Expr), [Output]) :-
    evaluate_expression(Expr, Value),
    format(atom(Output), 'Output: ~w', [Value]).

interpret_while(BoolExpr, DoBlock, Result) :-
    evaluate_expression(BoolExpr, true),
    interpret(DoBlock, ThisResult),
    interpret_while(BoolExpr, DoBlock, MoreResults),
    append(ThisResult, MoreResults, Result).
interpret_while(BoolExpr, _, []) :-
    evaluate_expression(BoolExpr, false).

evaluate_expression(true, true).
evaluate_expression(false, false).
evaluate_expression(eq(L, R), Result) :-
    evaluate_expression(L, LeftVal),
    evaluate_expression(R, RightVal),
    (LeftVal = RightVal -> Result = true; Result = false).
evaluate_expression(num(N), N).
evaluate_expression(var(V), Value) :-
    variable(V, Value).
evaluate_expression(add(L, R), Result) :-
    evaluate_expression(L, Left),
    evaluate_expression(R, Right),
    Result is Left + Right.
evaluate_expression(sub(L, R), Result) :-
    evaluate_expression(L, Left),
    evaluate_expression(R, Right),
    Result is Left - Right.

